teamco1$cluster<-res$cluster
teamcluster<-seq(1:numcluster)
teamcluster<-data.frame(teamcluster)
for(i in 1:numcluster){
teamcluster$total[i]<-nrow(subset(teamco1,teamco1$cluster==i))
teamcluster$wins[i]<-nrow(subset(teamco1,teamco1$winner==1&teamco1$cluster==i))
}
teamcluster$rate<-teamcluster$wins/teamcluster$total
winorlose<-seq(1:nrow(all))
winorlose<-data.frame(winorlose)
for(i in 1:nrow(all)){
winorlose$winner[i]<-subset(teamco1,teamco1$matchno==i & teamco1$winner==1,select="cluster")
winorlose$loser[i]<-subset(teamco1,teamco1$matchno==i & teamco1$winner==0,select="cluster")
}
names(winorlose)<-c("matchno","winner","loser")
require(trueskill)
#時系列でやるならこことtの値が変わる
winorlose$margin <- 1
winorlose$Round<-as.factor(season)
winorlose$mu1 <- NA
winorlose$sigma1 <- NA
winorlose$mu2 <- NA
winorlose$sigma2 <- NA
# 強さをrateで推定する。100倍する。
for(i in 1:nrow(all)){
winorlose$rate1[i]<-subset(teamcluster,select="rate",teamcluster==winorlose$winner[i])
winorlose$rate2[i]<-subset(teamcluster,select="rate",teamcluster==winorlose$loser[i])
winorlose$rate1[i]<-as.numeric(winorlose$rate1[i])*100
winorlose$rate2[i]<-as.numeric(winorlose$rate2[i])*100
}
# 100を基準に初期平均値を決めて初期分散を決定する。
winorlose[c("mu1","sigma1")] <- c(100 - as.numeric(winorlose$rate1), round(100 - as.numeric(winorlose$rate1) - ((100 - as.numeric(winorlose$rate1)) / 3), 1))
winorlose[c("mu2","sigma2")] <- c(100 - as.numeric(winorlose$rate2), round(100 - as.numeric(winorlose$rate2) - ((100 - as.numeric(winorlose$rate2)) / 3), 1))
parameters <- Parameters()
# trueskillmodelで平均値・分散を更新する
winorlose <- Trueskill(winorlose, parameters)
teamcluster$rating<-as.numeric(teamcluster$rate)*100
for(i in 1:nrow(teamcluster)){
mu<-subset(winorlose,select="mu1",winner==i)
sigma<-subset(winorlose,select="sigma1",winner==i)
teamcluster$mu[i]<-mu[1,1]
teamcluster$sigma[i]<-sigma[1,1]
}
# データフレームをここで何故か返す
return(winorlose)
return(teamco1)
return(all)
#バイオリンプロットをするために平均と分散からサンプリングする
allsample<-c()
for(i in 1:nrow(teamcluster)){
sample<-rnorm(100,as.numeric(teamcluster$mu[i]),as.numeric(teamcluster$sigma[i])^(1/2))
sample<-data.frame(sample)
sample$cluster<-i
allsample<-rbind(allsample,sample)
}
p<-
ggplot(allsample,aes(x=as.factor(cluster),y=sample,colour=as.factor(cluster)))
p+
geom_violin(trim=T,fill="#999999",linetype="blank",alpha=I(1/3))+
theme(legend.position="none")+
stat_summary(geom="pointrange",fun.y = mean, fun.ymin = function(x) mean(x)-sd(x), fun.ymax = function(x) mean(x)+sd(x), size=1,alpha=.5)
require(ggplot2)
View(allsample)
View(teamco1)
allsample<-c()
for(i in 1:nrow(teamcluster)){
sample<-rnorm(100,as.numeric(teamcluster$mu[i]),as.numeric(teamcluster$sigma[i])^(1/2))
sample<-data.frame(sample)
sample$cluster<-i
allsample<-rbind(allsample,sample)
}
p<-
ggplot(allsample,aes(x=as.factor(cluster),y=sample,colour=as.factor(cluster)))
p+
geom_violin(trim=T,fill="#999999",linetype="blank",alpha=I(1/3))+
theme(legend.position="none")+
stat_summary(geom="pointrange",fun.y = mean, fun.ymin = function(x) mean(x)-sd(x), fun.ymax = function(x) mean(x)+sd(x), size=1,alpha=.5)
View(teamco1)
View(teamcluster)
View(winorlose)
require(RPostgreSQL)
con <- dbConnect(PostgreSQL(),host="localhost",user="postgres",password="fukasawa1225",dbname="db_artisoc")
g1 <- dbGetQuery(con,"SELECT * FROM governmentlog where simulationcode ='201602rsmv2demand1'")
g2 <- dbGetQuery(con,"SELECT * FROM governmentlog where simulationcode ='201602rsmv2demand2'")
g3 <- dbGetQuery(con,"SELECT * FROM governmentlog where simulationcode ='201602rsmv2demand3'")
g4 <- dbGetQuery(con,"SELECT * FROM governmentlog where simulationcode ='201602rsmv2demand4'")
g5 <- dbGetQuery(con,"SELECT * FROM governmentlog where simulationcode ='201602rsmv2demand5'")
g6 <- dbGetQuery(con,"SELECT * FROM governmentlog where simulationcode ='201602rsmv2demand6'")
g7 <- dbGetQuery(con,"SELECT * FROM governmentlog where simulationcode ='201602rsmv2demand7'")
g8 <- dbGetQuery(con,"SELECT * FROM governmentlog where simulationcode ='201602rsmv2demand8'")
g9 <- dbGetQuery(con,"SELECT * FROM governmentlog where simulationcode ='201602rsmv2demand9'")
g10 <- dbGetQuery(con,"SELECT * FROM governmentlog where simulationcode ='201602rsmv2demand10'")
g11 <- dbGetQuery(con,"SELECT * FROM governmentlog where simulationcode ='201602rsmv2demand11'")
g12 <- dbGetQuery(con,"SELECT * FROM governmentlog where simulationcode ='201602rsmv2demand12'")
g13 <- dbGetQuery(con,"SELECT * FROM governmentlog where simulationcode ='201602rsmv2demand13'")
g14 <- dbGetQuery(con,"SELECT * FROM governmentlog where simulationcode ='201602rsmv2demand14'")
g15 <- dbGetQuery(con,"SELECT * FROM governmentlog where simulationcode ='201602rsmv2demand15'")
g16 <- dbGetQuery(con,"SELECT * FROM governmentlog where simulationcode ='201602rsmv2demand16'")
g17 <- dbGetQuery(con,"SELECT * FROM governmentlog where simulationcode ='201602rsmv2demand17'")
save.image("D:/skydrive/研究-院-/研究報告/networkモデル/rsm_dispersion/v3demand.RData")
g1 <- dbGetQuery(con,"SELECT * FROM governmentlog where simulationcode ='201602rsmv2strength1'")
g2 <- dbGetQuery(con,"SELECT * FROM governmentlog where simulationcode ='201602rsmv2strength2'")
g3 <- dbGetQuery(con,"SELECT * FROM governmentlog where simulationcode ='201602rsmv2strength3'")
g4 <- dbGetQuery(con,"SELECT * FROM governmentlog where simulationcode ='201602rsmv2strength4'")
g5 <- dbGetQuery(con,"SELECT * FROM governmentlog where simulationcode ='201602rsmv2strength5'")
g6 <- dbGetQuery(con,"SELECT * FROM governmentlog where simulationcode ='201602rsmv2strength6'")
g7 <- dbGetQuery(con,"SELECT * FROM governmentlog where simulationcode ='201602rsmv2strength7'")
g8 <- dbGetQuery(con,"SELECT * FROM governmentlog where simulationcode ='201602rsmv2strength8'")
g9 <- dbGetQuery(con,"SELECT * FROM governmentlog where simulationcode ='201602rsmv2strength9'")
g10 <- dbGetQuery(con,"SELECT * FROM governmentlog where simulationcode ='201602rsmv2strength10'")
g11 <- dbGetQuery(con,"SELECT * FROM governmentlog where simulationcode ='201602rsmv2strength11'")
save.image("D:/skydrive/研究-院-/研究報告/networkモデル/rsm_dispersion/v3strength.RData")
setwd("~/OneDrive/python/niconicorelationcategory")
Sys.getenv("USERPROFILE")
setwd("")
setwd("~/OneDrive/R")
my.Rprofile <- '
setHook(packageEvent("grDevices", "onLoad"),
function(...){
if(.Platform$OS.type == "windows")
grDevices::windowsFonts(sans ="MS Gothic",
serif="MS Mincho",
mono ="FixedFont")
if(capabilities("aqua"))
grDevices::quartzFonts(
sans =grDevices::quartzFont(
c("Hiragino Kaku Gothic Pro W3",
"Hiragino Kaku Gothic Pro W6",
"Hiragino Kaku Gothic Pro W3",
"Hiragino Kaku Gothic Pro W6")),
serif=grDevices::quartzFont(
c("Hiragino Mincho Pro W3",
"Hiragino Mincho Pro W6",
"Hiragino Mincho Pro W3",
"Hiragino Mincho Pro W6")))
if(capabilities("X11"))
grDevices::X11.options(
fonts=c("-kochi-gothic-%s-%s-*-*-%d-*-*-*-*-*-*-*",
"-adobe-symbol-medium-r-*-*-%d-*-*-*-*-*-*-*"))
grDevices::pdf.options(family="Japan1GothicBBB")
grDevices::ps.options(family="Japan1GothicBBB")
}
)
attach(NULL, name = "JapanEnv")
assign("familyset_hook",
function() {
winfontdevs=c("windows","win.metafile",
"png","bmp","jpeg","tiff","RStudioGD")
macfontdevs=c("quartz","quartz_off_screen","RStudioGD")
devname=strsplit(names(dev.cur()),":")[[1L]][1]
if ((.Platform$OS.type == "windows") &&
(devname %in% winfontdevs))
par(family="sans")
if (capabilities("aqua") &&
devname %in% macfontdevs)
par(family="sans")
},
pos="JapanEnv")
setHook("plot.new", get("familyset_hook", pos="JapanEnv"))
setHook("persp", get("familyset_hook", pos="JapanEnv"))
'
cat(my.Rprofile, file=".Rprofile")
cm<-c(165,154,187,145,167,172,170)
kg<-c(60,55,77,50,54,69,65)
all<-cbind(cm,kg)
all<-data.frame(all)
View(all)
average(all$cm)
means(all$cm)
means(all$cm)
mean(all$cm)
var(all$cm)
mean(all$kg)
var(all$kg)
var(all$cm,all$kg)
cor(all$cm,all$kg)
f<-10*p^9-36*p^8+48*p^7-28*p^6+6*p^5
f<-function(p) 10*p^9-36*p^8+48*p^7-28*p^6+6*p^5
uniroot(f,c(0,1))
f<-function(p) 10*p^4-36*p^3+48*p^2-28*p^+6
uniroot(f,c(0,1))
f(1)
f(0)
View(f)
f<-function(p) 10*p^4-36*p^3+48*p^2-28*p+6
uniroot(f,c(0,1))
f(1)
f(0)
f(0.5)
f<-function(p) (factorial(10)/(factorial(6)*factorial(4)))*p^6*(1-p)^4
uniroot(f,c(0,1))
optim(c(0,1),f)
optimize(f, interval=c(0,1), tol=0.0001, maximum=TRUE)
100*(0.99^100)
ff<-function(x,y) exp(x^2+y^2-x+y)
optim(c(0.2, 0.5), ff, control=list(fnscale=-1))
ff(0,1)
optim(c(0.2, 0.5), ff)
optimize(c(0.2, 0.5), ff)
optimize(ff,c(0.2, 0.5))
xmin <- optimize(f, c(0, 1), tol = 0.0001)
xmin
xmin <- optimize(ff, c(0, 1), tol = 0.0001)
xmin <- optimize(ff, x=0,y=1, tol = 0.0001)
xmin <- optimize(ff, x=c(0,1),y=c(0,1), tol = 0.0001)
xmin <- optimize(ff, c(0, 1), tol = 0.0001)
?optimize
optim(ff,c(0,1))
optimize(ff,c(0,1))
load("~/OneDrive/python/niconicorelationcategory/from0221to0320.RData")
View(allcenterlist)
View(alledgecategorylist)
View(alledgecategorylist)
load("from0221to0320.RData")
require(ggplot2)
allcenterlist$value<-as.numeric(allcenterlist$value)
dm<-read.csv('https://github.com/ozt-ca/tjo.hatenablog.samples/raw/master/r_samples/public_lib/jp/exp_uci_datasets/tennis/men.txt',header=T,sep='\t')
dm<-read.csv('https://github.com/ozt-ca/tjo.hatenablog.samples/raw/master/r_samples/public_lib/jp/exp_uci_datasets/tennis/men.txt',header=T,sep='\t')
View(dm)
dm<-read.csv('https://www.kaggle.com/c/titanic/download/train.csv',header=T,sep='\t')
View(dm)
dm<-read.csv('https://github.com/PyDataTokyo/pydata-tokyo-tutorial-1/blob/master/data/test.csv',header=T,sep='\t')
View(dm)
dm<-read.csv('https://raw.githubusercontent.com/PyDataTokyo/pydata-tokyo-tutorial-1/master/data/test.csv',header=T,sep='\t')
View(dm)
dm<-read.csv('https://raw.githubusercontent.com/PyDataTokyo/pydata-tokyo-tutorial-1/master/data/test.csv',header=T,sep=',')
View(dm)
mean(dm[Sex=='male']['Age'])
mean(dm['Sex'=='male']['Age'])
mean(dm[dm[Sex]=='male']['Age'])
mean(dm[dm["Sex"]=='male']['Age'])
dm[dm["Sex"]=='male']
dm[dm["Sex"]=='male']["Age"]
dm["Age"]
dm[is.na(dm)]<-0
mean(dm[dm["Sex"]=='male']['Age'])
dm["Age"]
dm<-read.csv('https://raw.githubusercontent.com/PyDataTokyo/pydata-tokyo-tutorial-1/master/data/test.csv',header=T,sep=',',stringsAsFactors = FALSE)
# NAは0にしておく
dm[is.na(dm)]<-0
mean(dm[dm["Sex"]=='male']['Age'])
dm["Age"]
class(dm["Age"])
class(dm$Age)
maledm<-dm[dm$Age=="male"]
maledm<-dm[dm$Sex=="male"]
maledm<-dm[dm$sex=="male"]
dm$sex
dm$Sex
maledm<-dm[dm$Sex=="male"]
maledm<-dm$Sex=="male"
maledm<-dm["Sex"=="male"]
maledm<-subset(dm,"Sex"=="male")
maledm<-subset(dm,Sex-=="male")
maledm<-subset(dm,Sex=="male")
mean(maledm$Age)
mean(subset(dm,Sex=="male")$Age)
mean(dm$Age)
dm_notage<-dm[,-"Age"]
dm_notageandSex<-dm[,-c(4,5)]
hist(dm$Age)
install.packages(c("ade4", "BH", "boot", "cluster", "clusterSim", "codetools", "colorspace", "curl", "DBI", "devtools", "digest", "DoE.base", "dplyr", "DT", "dygraphs", "evaluate", "foreign", "formatR", "formattable", "ggfortify", "ggplot2", "git2r", "googleVis", "gridExtra", "gtable", "highr", "htmltools", "htmlwidgets", "httr", "irlba", "jsonlite", "knitr", "lattice", "lazyeval", "loo", "Matrix", "matrixStats", "memoise", "mgcv", "mime", "munsell", "nlme", "nnet", "pipeR", "plyr", "proto", "R2HTML", "R6", "Rcpp", "RcppEigen", "RCurl", "reshape2", "rgl", "rlist", "rmarkdown", "RPostgreSQL", "rsm", "rstan", "rstudioapi", "rversions", "scales", "shiny", "shinyjs", "shinystan", "shinythemes", "StanHeaders", "stringi", "stringr", "survival", "threejs", "tidyr", "vcd", "XML", "xml2", "xtable", "zoo"))
require(igraph)
require(stringr)
d<-read.csv2('/Users/KuriMac/GitHub/otree_game/original_game/quiz/static/csv/route.csv',fileEncoding = 'utf-8',header=F,sep = ",")
d<-read.csv('/Users/KuriMac/GitHub/otree_game/original_game/quiz/q-learning/init/route.csv')
d<-read.csv('D/GitHub/otree_game/original_game/quiz/q-learning/init/route.csv')
d<-read.csv('D:/GitHub/otree_game/original_game/quiz/q-learning/init/route.csv')
View(d)
d<-read.csv('D:/GitHub/otree_game/original_game/quiz/q-learning/init/route.csv',header=F)
View(d)
d<-d[,-44]
View(d)
d<-d[-44,]
colnames(d)<-c("from","to","Qvalue")
d$Qvalue<-runif(n=43,min=1,max=10)
write.csv(d,"D:/GitHub/otree_game/original_game/quiz/q-learning/init/bridge1_bridge2_bridge3.csv",row.names = F)
require(stringr)
str_c
dd<-subset(d, "from"!=9&&"to"!="14")
View(dd)
dd<-subset(d, "from"!=9&"to"!="14")
dd<-subset(d, "from"!=9&"to"!=14)
dd<-subset(d, "from"!=9&&"to"!=14)
dd<-subset(d, "from"!="9"&&"to"!="14")
d$from
d<-read.csv('D:/GitHub/otree_game/original_game/quiz/q-learning/init/route.csv',header=F,stringAsFactors=F)
d<-read.csv('D:/GitHub/otree_game/original_game/quiz/q-learning/init/route.csv',header=F,stringAsFactors=F)
d<-read.csv('D:/GitHub/otree_game/original_game/quiz/q-learning/init/route.csv',header=F,stringsAsFactors = FALSE)
d<-d[-44,]
colnames(d)<-c("from","to","Qvalue")
d$Qvalue<-runif(n=43,min=1,max=10)
write.csv(d,"D:/GitHub/otree_game/original_game/quiz/q-learning/init/bridge1_bridge2_bridge3.csv",row.names = F)
dd<-subset(d, "from"!=9&&"to"!=14)
dd<-subset(d, "from"!="9"&&"to"!="14")
dd<-subset(d, "from"=="9"&&"to"=="14")
dd<-subset(d, "from"==9&&"to"==14)
dd<-subset(d, from==9&&to==14)
dd<-subset(d, from==9)
dd<-subset(d, from==9&to==14)
dd<-subset(d, from!=9&&to!=14)
dd<-subset(d, from!=9&to!=14)
dd<-subset(d, from==9&to==14)
dd<-subset(d, !(from==9&to==14))
p<-"from==9&to==14"
dd<-subset(d, !(p))
p<-from==9&to==14
p<-(from==9&to==14)
p<-!(from==9&to==14)
c(c(9,14),c(8,13))
l<-c(c(9,14),c(8,13))
l[0]
l
l[1]
l[2]
l[3]
l[4]
detailstatus<-c(c(0,0),c(9,14),c(8,13),c(7,12),c(9,14,8,13),c(9,14,7,12),c(8,13,7,12),c(8,13,7,12),c(8,13,7,12,9,14))
detailstatus[1]
detailstatus<-list(c(0,0),c(9,14),c(8,13),c(7,12),c(9,14,8,13),c(9,14,7,12),c(8,13,7,12),c(8,13,7,12),c(8,13,7,12,9,14))
detailstatus[0]
detailstatus[0][0]
detailstatus[1][1]
detailstatus[1]
detailstatus[1][1]
detailstatus[[1]][1]
detailstatus[[1]][2]
dd<-subset(d, !(from==detailstatus[[1]][1]&to==detailstatus[[1]][2]))
length(detailstatus)
dd<-subset(d, !(from==detailstatus[[9]][1]&to==detailstatus[[9]][2]))
detailstatus[[9]][2]
namelist<-c('path_1_18','path_1_19','path_1_20','path_2_18','path_2_19','path_2_20','path_3_18','path_3_19','path_3_20')
status<-c("bridge1_bridge2_bridge3",'bridge1_bridge2','bridge1_bridge3','bridge2_bridge3','bridge1','bridge2','bridge3','No_Bridge')
detailstatus<-c(c(0,0),c(9,14),c(8,13),c(7,12),c(9,14,8,13),c(9,14,7,12),c(8,13,7,12),c(8,13,7,12),c(8,13,7,12,9,14))
for(i in 1:length(namelist)){
for(k in 1:length(detailstatus)){
dd<-subset(d, !(from==detailstatus[[k]][1]&to==detailstatus[[k]][2]))
if(length(detailstatus[[k]])>2){
dd<-subset(dd, !(from==detailstatus[[k]][3]&to==detailstatus[[k]][4]))
}
if(length(detailstatus[[k]])>4){
dd<-subset(dd, !(from==detailstatus[[k]][5]&to==detailstatus[[k]][6]))
}
write.table(ddd,str_c('D:/GitHub/otree_game/original_game/quiz/q-learning/init/',namelist[i],'/',status[k],'.csv'),col.names=T,row.names=F,fileEncoding = 'utf-8',sep=',')
}
}
namelist<-c('path_1_18','path_1_19','path_1_20','path_2_18','path_2_19','path_2_20','path_3_18','path_3_19','path_3_20')
status<-c("bridge1_bridge2_bridge3",'bridge1_bridge2','bridge1_bridge3','bridge2_bridge3','bridge1','bridge2','bridge3','No_Bridge')
detailstatus<-c(c(0,0),c(9,14),c(8,13),c(7,12),c(9,14,8,13),c(9,14,7,12),c(8,13,7,12),c(8,13,7,12),c(8,13,7,12,9,14))
for(i in 1:length(namelist)){
for(k in 1:length(detailstatus)){
dd<-subset(d, !(from==detailstatus[[k]][1]&to==detailstatus[[k]][2]))
if(length(detailstatus[[k]])>2){
dd<-subset(dd, !(from==detailstatus[[k]][3]&to==detailstatus[[k]][4]))
}
if(length(detailstatus[[k]])>4){
dd<-subset(dd, !(from==detailstatus[[k]][5]&to==detailstatus[[k]][6]))
}
write.table(dd,str_c('D:/GitHub/otree_game/original_game/quiz/q-learning/init/',namelist[i],'/',status[k],'.csv'),col.names=T,row.names=F,fileEncoding = 'utf-8',sep=',')
}
}
namelist<-c('path_1_18','path_1_19','path_1_20','path_2_18','path_2_19','path_2_20','path_3_18','path_3_19','path_3_20')
status<-c("bridge1_bridge2_bridge3",'bridge1_bridge2','bridge1_bridge3','bridge2_bridge3','bridge1','bridge2','bridge3','No_Bridge')
detailstatus<-list(c(0,0),c(9,14),c(8,13),c(7,12),c(9,14,8,13),c(9,14,7,12),c(8,13,7,12),c(8,13,7,12),c(8,13,7,12,9,14))
for(i in 1:length(namelist)){
for(k in 1:length(detailstatus)){
dd<-subset(d, !(from==detailstatus[[k]][1]&to==detailstatus[[k]][2]))
if(length(detailstatus[[k]])>2){
dd<-subset(dd, !(from==detailstatus[[k]][3]&to==detailstatus[[k]][4]))
}
if(length(detailstatus[[k]])>4){
dd<-subset(dd, !(from==detailstatus[[k]][5]&to==detailstatus[[k]][6]))
}
write.table(ddd,str_c('D:/GitHub/otree_game/original_game/quiz/q-learning/init/',namelist[i],'/',status[k],'.csv'),col.names=T,row.names=F,fileEncoding = 'utf-8',sep=',')
}
}
namelist<-c('path_1_18','path_1_19','path_1_20','path_2_18','path_2_19','path_2_20','path_3_18','path_3_19','path_3_20')
status<-c("bridge1_bridge2_bridge3",'bridge1_bridge2','bridge1_bridge3','bridge2_bridge3','bridge1','bridge2','bridge3','No_Bridge')
detailstatus<-list(c(0,0),c(9,14),c(8,13),c(7,12),c(9,14,8,13),c(9,14,7,12),c(8,13,7,12),c(8,13,7,12),c(8,13,7,12,9,14))
for(i in 1:length(namelist)){
for(k in 1:length(detailstatus)){
dd<-subset(d, !(from==detailstatus[[k]][1]&to==detailstatus[[k]][2]))
if(length(detailstatus[[k]])>2){
dd<-subset(dd, !(from==detailstatus[[k]][3]&to==detailstatus[[k]][4]))
}
if(length(detailstatus[[k]])>4){
dd<-subset(dd, !(from==detailstatus[[k]][5]&to==detailstatus[[k]][6]))
}
write.table(dd,str_c('D:/GitHub/otree_game/original_game/quiz/q-learning/init/',namelist[i],'/',status[k],'.csv'),col.names=T,row.names=F,fileEncoding = 'utf-8',sep=',')
}
}
detailstatus[[9]]
write.table(dd,str_c('D:/GitHub/otree_game/original_game/quiz/q-learning/init/',namelist[i],'/',status[k],'.csv'),col.names=T,row.names=F,fileEncoding = 'utf-8',sep=',')
dd
write.table(dd,str_c('D:/GitHub/otree_game/original_game/quiz/q-learning/init/',namelist[i],'/',status[k],'.csv'),col.names=T,row.names=F,fileEncoding = 'utf-8',sep=',')
status[9]
status[8]
namelist<-c('path_1_18','path_1_19','path_1_20','path_2_18','path_2_19','path_2_20','path_3_18','path_3_19','path_3_20')
status<-c("bridge1_bridge2_bridge3",'bridge1_bridge2','bridge1_bridge3','bridge2_bridge3','bridge1','bridge2','bridge3','No_Bridge')
detailstatus<-list(c(0,0),c(9,14),c(8,13),c(7,12),c(9,14,8,13),c(9,14,7,12),c(8,13,7,12),c(8,13,7,12,9,14))
for(i in 1:length(namelist)){
for(k in 1:length(detailstatus)){
dd<-subset(d, !(from==detailstatus[[k]][1]&to==detailstatus[[k]][2]))
if(length(detailstatus[[k]])>2){
dd<-subset(dd, !(from==detailstatus[[k]][3]&to==detailstatus[[k]][4]))
}
if(length(detailstatus[[k]])>4){
dd<-subset(dd, !(from==detailstatus[[k]][5]&to==detailstatus[[k]][6]))
}
write.table(dd,str_c('D:/GitHub/otree_game/original_game/quiz/q-learning/init/',namelist[i],'/',status[k],'.csv'),col.names=T,row.names=F,fileEncoding = 'utf-8',sep=',')
}
}
require(stringr)
d<-read.csv('/Users/KuriMac/GitHub/fukasawa-otree-bridge-management/original_game/bridge_management/q-learning/init/route.csv',header=F,stringsAsFactors = F)
d$cost<-0
#Windowsなら
#d<-read.csv('D:/GitHub/otree_game/original_game/quiz/q-learning/init/route.csv',header=F,stringsAsFacendrs = FALSE)
colnames(d)<-c("start","end","Qvalue","cost")
d$Qvalue<-runif(n=length(d$start),min=1,max=10)
namelist<-c('path_2_12','path_2_14')
status<-c("bridge1_bridge2_bridge3",'bridge1_bridge2','bridge1_bridge3','bridge2_bridge3','bridge1','bridge2','bridge3','No_Bridge')
detailstatus<-list(c(0,0),c(4,9),c(5,10),c(6,11),c(4,9,5,10),c(6,11,4,9),c(5,10,4,9),c(4,9,5,10,6,11))
for(i in 1:length(namelist)){
for(k in 1:length(detailstatus)){
dd<-subset(d, !(start==detailstatus[[k]][1]&end==detailstatus[[k]][2]))
if(length(detailstatus[[k]])>2){
dd<-subset(dd, !(start==detailstatus[[k]][3]&end==detailstatus[[k]][4]))
}
if(length(detailstatus[[k]])>4){
dd<-subset(dd, !(start==detailstatus[[k]][5]&end==detailstatus[[k]][6]))
}
write.table(dd,str_c('/Users/KuriMac/GitHub/fukasawa-otree-bridge-management/original_game/bridge_management/q-learning/init/',namelist[i],'/',status[k],'.csv'),col.names=T,row.names=F,fileEncoding = 'utf-8',sep=',')
#windows
#write.table(dd,str_c('D:/GitHub/otree_game/original_game/quiz/q-learning/init/',namelist[i],'/',status[k],'.csv'),col.names=T,row.names=F,fileEncoding = 'utf-8',sep=',')
}
}
d<-read.csv('/Users/KuriMac/GitHub/fukasawa-otree-bridge-management/original_game/bridge_management/q-learning/init/route.csv',header=F,stringsAsFactors = F)
require(stringr)
d<-read.csv('/Users/nishinolab/GitHub/fukasawa-otree-bridge-management/original_game/bridge_management/q-learning/init/route.csv',header=F,stringsAsFactors = F)
d$cost<-0
#Windowsなら
#d<-read.csv('D:/GitHub/otree_game/original_game/quiz/q-learning/init/route.csv',header=F,stringsAsFacendrs = FALSE)
colnames(d)<-c("start","end","Qvalue","cost")
d$Qvalue<-runif(n=length(d$start),min=1,max=10)
namelist<-c('path_2_12','path_2_14')
status<-c("bridge1_bridge2_bridge3",'bridge1_bridge2','bridge1_bridge3','bridge2_bridge3','bridge1','bridge2','bridge3','No_Bridge')
detailstatus<-list(c(0,0),c(4,9),c(5,10),c(6,11),c(4,9,5,10),c(6,11,4,9),c(5,10,4,9),c(4,9,5,10,6,11))
for(i in 1:length(namelist)){
for(k in 1:length(detailstatus)){
dd<-subset(d, !(start==detailstatus[[k]][1]&end==detailstatus[[k]][2]))
if(length(detailstatus[[k]])>2){
dd<-subset(dd, !(start==detailstatus[[k]][3]&end==detailstatus[[k]][4]))
}
if(length(detailstatus[[k]])>4){
dd<-subset(dd, !(start==detailstatus[[k]][5]&end==detailstatus[[k]][6]))
}
write.table(dd,str_c('/Users/nishinolab/GitHub/fukasawa-otree-bridge-management/original_game/bridge_management/q-learning/init/',namelist[i],'/',status[k],'.csv'),col.names=T,row.names=F,fileEncoding = 'utf-8',sep=',')
#windows
#write.table(dd,str_c('D:/GitHub/otree_game/original_game/quiz/q-learning/init/',namelist[i],'/',status[k],'.csv'),col.names=T,row.names=F,fileEncoding = 'utf-8',sep=',')
}
}
d<-read.csv('/Users/nishinolab/GitHub/fukasawa-otree-bridge-management/original_game/bridge_management/q-learning/init/route.csv',header=F,stringsAsFactors = F)
#Windowsなら
#d<-read.csv('D:/GitHub/otree_game/original_game/quiz/q-learning/init/route.csv',header=F,stringsAsFacendrs = FALSE)
colnames(d)<-c("start","end","Qvalue","cost")
View(d)
require(stringr)
d<-read.csv('/Users/nishinolab/GitHub/fukasawa-otree-bridge-management/original_game/bridge_management/q-learning/init/route.csv',header=F,stringsAsFactors = F)
#Windowsなら
#d<-read.csv('D:/GitHub/otree_game/original_game/quiz/q-learning/init/route.csv',header=F,stringsAsFacendrs = FALSE)
colnames(d)<-c("start","end","Qvalue","cost")
d$Qvalue<-runif(n=length(d$start),min=1,max=10)
namelist<-c('path_2_12','path_2_14')
status<-c("bridge1_bridge2_bridge3",'bridge1_bridge2','bridge1_bridge3','bridge2_bridge3','bridge1','bridge2','bridge3','No_Bridge')
detailstatus<-list(c(0,0),c(4,9),c(5,10),c(6,11),c(4,9,5,10),c(6,11,4,9),c(5,10,4,9),c(4,9,5,10,6,11))
for(i in 1:length(namelist)){
for(k in 1:length(detailstatus)){
dd<-subset(d, !(start==detailstatus[[k]][1]&end==detailstatus[[k]][2]))
if(length(detailstatus[[k]])>2){
dd<-subset(dd, !(start==detailstatus[[k]][3]&end==detailstatus[[k]][4]))
}
if(length(detailstatus[[k]])>4){
dd<-subset(dd, !(start==detailstatus[[k]][5]&end==detailstatus[[k]][6]))
}
write.table(dd,str_c('/Users/nishinolab/GitHub/fukasawa-otree-bridge-management/original_game/bridge_management/q-learning/init/',namelist[i],'/',status[k],'.csv'),col.names=T,row.names=F,fileEncoding = 'utf-8',sep=',')
#windows
#write.table(dd,str_c('D:/GitHub/otree_game/original_game/quiz/q-learning/init/',namelist[i],'/',status[k],'.csv'),col.names=T,row.names=F,fileEncoding = 'utf-8',sep=',')
}
}
devtools::install_github("dichika/yeah")
require(yeah)
detayo()
install.packages('audio')
detayo()
zoi()
doudesuka()
yeah::dsktrance()
yeah::ganbare()
yeah::numacraw()
yeah::tsurami()
yeah::ggnumacraw()
yeah::libraryy()
detayo()
setwd("~/Github/dena-visualize")
install.packages('RMeCab')
install.packages('igraph')
install.packages("RMeCab", repos = "http://rmecab.jp/R")
install.packages('ngram')
require(RMeCab)
ngram_2tokens <- Ngram("dena.txt", type=1, pos=c("名詞","動詞","形容詞"), N=2)
require(RMeCab)
require(RMeCab)
